(()=>{"use strict";var e={793:function(e,t,n){var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var o=Object.getOwnPropertyDescriptor(t,n);o&&!("get"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,o)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return o(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.httpServer=void 0;const a=s(n(896)),i=s(n(928)),l=s(n(611));t.httpServer=l.createServer((function(e,t){const n=i.resolve(i.dirname(""))+("/"===e.url?"/front/index.html":"/front"+e.url);a.readFile(n,(function(e,n){if(e)return t.writeHead(404),void t.end(JSON.stringify(e));t.writeHead(200),t.end(n)}))}))},335:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.handleAddShips=function(e,t,n){const a=JSON.parse(t),i=(0,s.getShipPositions)(a.ships);if(o.stateManager.updateClient(n,{shipsCoord:i}),o.stateManager.addPlayerToGame(a)<2)return;const{players:l,currentPlayer:c}=o.stateManager.getGameData(a.gameId);o.stateManager.setCurrentPlayer(c),l.forEach(((e,t)=>{const n=o.stateManager.getWebSocket(t),s={ships:e.ships,currentPlayer:e.indexPlayer},a=JSON.stringify(s),i=JSON.stringify({currentPlayer:c}),l=(0,r.getFormattedResponse)("start_game",a),d=(0,r.getFormattedResponse)("turn",i);console.log("response type = start_game"),n.send(l),console.log("response type = turn"),n.send(d)}))};const r=n(565),o=n(332),s=n(152)},407:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.handleAddUserToRoom=function(e,t,n){const{indexRoom:a}=JSON.parse(t),i=s.stateManager.getClientInRoom(a);if(i===n)return void console.warn("Player is in room already");const l=s.stateManager.getWebSocket(i);s.stateManager.removeRoom(a,i);const c=s.stateManager.getRooms(),d=JSON.stringify(c),u=(0,o.getFormattedResponse)("update_room",d);s.stateManager.getAllSockets().forEach((e=>{console.log("response type = update_room"),e.send(u)}));const g=(0,r.randomUUID)();s.stateManager.updateClient(i,{gameId:g}),s.stateManager.updateClient(n,{gameId:g});const p={idGame:g,idPlayer:i},h=JSON.stringify(p),y=(0,o.getFormattedResponse)("create_game",h);console.log("response type = create_game"),l.send(y);const m={idGame:g,idPlayer:n},f=JSON.stringify(m),w=(0,o.getFormattedResponse)("create_game",f);console.log("response type = create_game"),e.send(w)};const r=n(982),o=n(565),s=n(332)},245:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.handleAttack=function(e,t,n){const l=JSON.parse(t),c=o.stateManager.getGameData(l.gameId),d=(0,s.getOpponentData)(c,n);if(!d)throw new Error("opponent wasn't found");if(o.stateManager.getCurrentPlayer()!==n)return void console.warn("Now is another player's turn");const u=d.indexPlayer,{ws:g}=o.stateManager.getClient(u);if(!o.stateManager.checkCell(u,l.x,l.y)){console.warn("This cell is not available");const t=JSON.stringify({currentPlayer:n});console.log("response type = turn");const o=(0,r.getFormattedResponse)("turn",t);return e.send(o),void g.send(o)}o.stateManager.updateCell(u,l.x,l.y);const{missed:p,shoted:h,killed:y,isGameOver:m}=(0,a.checkHit)(u,l.x,l.y),f=[];y.forEach((e=>{const t={position:{x:e.x,y:e.y},currentPlayer:n,status:"killed"};f.push(t)})),p.forEach((e=>{const t={position:{x:e.x,y:e.y},currentPlayer:n,status:"miss"};f.push(t)})),h.forEach((e=>{const t={position:{x:e.x,y:e.y},currentPlayer:n,status:"shot"};f.push(t)})),f.forEach((t=>{const n=JSON.stringify(t);console.log("response type = attack");const o=(0,r.getFormattedResponse)("attack",n);e.send(o),g.send(o)}));const w={currentPlayer:""};y.length||h.length?w.currentPlayer=n:w.currentPlayer=u,o.stateManager.setCurrentPlayer(w.currentPlayer);const M=JSON.stringify(w),x=(0,r.getFormattedResponse)("turn",M);console.log("response type = turn"),e.send(x),g.send(x),m&&(o.stateManager.addWin(n),(0,i.sendFinish)(n,u,e,g,l.gameId))};const r=n(565),o=n(332),s=n(49),a=n(39),i=n(144)},950:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.handleCreateRoom=function(e){const{roomId:t}=s.stateManager.getClient(e);if(t)return void console.warn("Player can create only one room");const n=(0,r.randomUUID)(),a=s.stateManager.createRoom(n,e),i=JSON.stringify(a),l=(0,o.getFormattedResponse)("update_room",i);s.stateManager.getAllSockets().forEach((e=>{console.log("response type = update_room"),e.send(l)}))};const r=n(982),o=n(565),s=n(332)},30:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.handleRandomAttack=function(e,t,n){const d=JSON.parse(t),u=o.stateManager.getGameData(d.gameId),g=(0,s.getOpponentData)(u,n);if(!g)throw new Error("opponent wasn't found");const p=g.indexPlayer,{ws:h}=o.stateManager.getClient(p),{board:y}=o.stateManager.getClient(n),m=(0,l.getRandomShot)(y,c.BOARD_SIZE),{missed:f,shoted:w,killed:M,isGameOver:x}=(0,a.checkHit)(p,m.x,m.y),_=[];M.forEach((e=>{const t={position:{x:e.x,y:e.y},currentPlayer:n,status:"killed"};_.push(t)})),f.forEach((e=>{const t={position:{x:e.x,y:e.y},currentPlayer:n,status:"miss"};_.push(t)})),w.forEach((e=>{const t={position:{x:e.x,y:e.y},currentPlayer:n,status:"shot"};_.push(t)})),_.forEach((t=>{const n=JSON.stringify(t),o=(0,r.getFormattedResponse)("attack",n);console.log("response type = attack"),e.send(o),h.send(o)}));const O={currentPlayer:""};M.length||w.length?O.currentPlayer=n:O.currentPlayer=p;const S=JSON.stringify(O),v=(0,r.getFormattedResponse)("turn",S);console.log("response type = turn"),e.send(v),console.log("response type = turn"),h.send(v),x&&(o.stateManager.addWin(n),(0,i.sendFinish)(n,p,e,h,d.gameId))};const r=n(565),o=n(332),s=n(49),a=n(39),i=n(144),l=n(186),c=n(139)},376:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.handleRegistration=function(e,t,n){const i=JSON.parse(t),{isSuccess:l,errorText:c}=o.stateManager.login(i);if(!l){const t={name:i.name,index:n,error:!0,errorText:c},o=JSON.stringify(t),s=(0,r.getFormattedResponse)("reg",o);return console.log("response type = reg"),void e.send(s)}o.stateManager.addClient(n,{ws:e,name:i.name,board:(0,s.createBoard)(a.BOARD_SIZE),roomId:o.stateManager.getRoomId(i.name)});const d=o.stateManager.getAllSockets(),u={name:i.name,index:n,error:!1,errorText:""},g=JSON.stringify(u),p=(0,r.getFormattedResponse)("reg",g);console.log("response type = reg"),e.send(p);const h=o.stateManager.getWinners(),y=JSON.stringify(h),m=(0,r.getFormattedResponse)("update_winners",y);d.forEach((e=>{console.log("response type = update_winners"),e.send(m)}));const f=o.stateManager.getRooms(),w=JSON.stringify(f),M=(0,r.getFormattedResponse)("update_room",w);d.forEach((e=>{console.log("response type = update_room"),e.send(M)}))};const r=n(565),o=n(332),s=n(412),a=n(139)},144:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.sendFinish=async function(e,t,n,a,i){const l={winPlayer:e},c=JSON.stringify(l),d=(0,r.getFormattedResponse)("finish",c);console.log("response type = finish"),await Promise.all([n.send(d),a.send(d)]);const u=o.stateManager.getAllSockets(),g=o.stateManager.getWinners(),p=JSON.stringify(g),h=(0,r.getFormattedResponse)("update_winners",p);console.log("response type = update_winners"),await Promise.all(u.map((e=>e.send(h)))),(0,s.resetGame)(e,t,i)};const r=n(565),o=n(332),s=n(45)},332:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.stateManager=void 0,t.stateManager=new class{constructor(){this.users=new Map,this.clients=new Map,this.roomsMap=new Map,this.games=new Map,this.winners=new Map,this.currentUser=""}getCurrentPlayer(){return this.currentUser}setCurrentPlayer(e){this.currentUser=e}login(e){const t=[];for(const e of this.clients.values())t.push(e.name);return t.includes(e.name)?{isSuccess:!1,errorText:`User with name "${e.name}" is already logged in.`}:this.users.has(e.name)?this.users.get(e.name)===e.password?{isSuccess:!0,errorText:""}:{isSuccess:!1,errorText:"Wrong password"}:(this.users.set(e.name,e.password),{isSuccess:!0,errorText:""})}createRoom(e,t){const n={roomId:e,roomUsers:[{name:this.getName(t),index:t}]};return this.roomsMap.set(e,n),this.updateClient(t,{roomId:e}),this.getRooms()}addClient(e,t){this.clients.set(e,{...t})}getClient(e){const t=this.clients.get(e);if(!t)throw new Error("client is not found");return t}getWebSocket(e){const t=this.clients.get(e);if(t)return t.ws;throw new Error(`Client with ID ${e} not found`)}updateClient(e,t){const n=this.clients.get(e);n&&this.clients.set(e,{...n,...t})}removeClient(e){this.clients.delete(e)}getAllClients(){return this.clients}getName(e){const t=this.clients.get(e);if(t&&t.name)return t.name;throw new Error("name is undefined")}getRooms(){return Array.from(this.roomsMap.values())}getAllSockets(){return Array.from(this.clients.values()).map((e=>e.ws))}getClientInRoom(e){const t=this.roomsMap.get(e);if(!t||0===t.roomUsers.length)throw new Error(`Room with id ${e} is empty or does not exist.`);return t.roomUsers[0].index}removeRoom(e,t){this.roomsMap.delete(e),this.getClient(t).roomId=null}addPlayerToGame({gameId:e,ships:t,indexPlayer:n}){let r=this.games.get(e);return r||(r={players:new Map,currentPlayer:n},this.games.set(e,r)),r.players.set(n,{ships:t,indexPlayer:n}),r.players.size}deleteGame(e){return this.games.delete(e)}getGameData(e){let t=this.games.get(e);if(!t)throw new Error("Game with such id is not found");return t}checkCell(e,t,n){const r=this.clients.get(e);if(!r||!r.board)throw new Error("Client or board not found");const o=`${t}${n}`,s=r.board.get(o);if(void 0===s)throw new Error("Cell not found");return s}updateCell(e,t,n){const r=this.clients.get(e);if(!r||!r.board)throw new Error("Client or board not found");const o=`${t}${n}`;if(!r.board.has(o))throw new Error("Cell not found on the board");r.board.set(o,!1)}addWin(e){const{name:t}=this.getClient(e);if(this.winners.has(t)){const e=this.winners.get(t);this.winners.set(t,e+1)}else this.winners.set(t,1)}getWinners(){const e=[];return this.winners.forEach(((t,n)=>{e.push({name:n,wins:t})})),e}getRoomId(e){for(const[t,n]of this.roomsMap.entries())if(n.roomUsers.find((t=>t.name===e)))return t;return null}}},139:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.BOARD_SIZE=void 0,t.BOARD_SIZE=10},39:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.checkHit=function(e,t,n){const{shipsCoord:s}=r.stateManager.getClient(e);if(!s)throw new Error("No ships data available for the opponent.");const a=[],i=[];let l=[],c=!1;e:for(let o=0;o<s.length;o++){const a=s[o];for(let o=0;o<a.positions.length;o++){const s=a.positions[o];if(s.x===t&&s.y===n){s.isHit=!0,r.stateManager.updateCell(e,t,n);const o=a.positions.every((e=>e.isHit));if(o){l=a.positions;break e}i.push({x:t,y:n});break e}}}if(l.length>0){for(let t=0;t<l.length;t++){const n=l[t],s=[{x:n.x-1,y:n.y},{x:n.x+1,y:n.y},{x:n.x,y:n.y-1},{x:n.x,y:n.y+1},{x:n.x-1,y:n.y-1},{x:n.x+1,y:n.y-1},{x:n.x-1,y:n.y+1},{x:n.x+1,y:n.y+1}];for(let t=0;t<s.length;t++){const n=s[t];n.x>=0&&n.x<o.BOARD_SIZE&&n.y>=0&&n.y<o.BOARD_SIZE&&(l.some((e=>e.x===n.x&&e.y===n.y))||a.some((e=>e.x===n.x&&e.y===n.y))||(a.push({...n}),r.stateManager.updateCell(e,n.x,n.y)))}}s.every((e=>e.positions.every((e=>e.isHit))))&&(c=!0)}return 0===l.length&&0===i.length&&(a.push({x:t,y:n}),r.stateManager.updateCell(e,t,n)),{missed:a,shoted:i,killed:l,isGameOver:c}};const r=n(332),o=n(139)},412:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.createBoard=function(e){const t=new Map;for(let n=0;n<e;n++)for(let r=0;r<e;r++){const e=`${n}${r}`;t.set(e,!0)}return t}},565:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.getFormattedResponse=function(e,t){const n={type:e,data:t,id:0};return JSON.stringify(n)}},49:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.getOpponentData=function(e,t){for(const[n,r]of e.players)if(n!==t)return r}},186:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.getRandomShot=function(e,t){let n,r,o;do{n=Math.floor(Math.random()*t),r=Math.floor(Math.random()*t),o=`${n}${r}`}while(!e.get(o));return{x:n,y:r}}},152:(e,t)=>{function n(e){const t=[];for(let n=0;n<e.length;n++){const r=e.direction?e.position.x:e.position.x+n,o=e.direction?e.position.y+n:e.position.y;t.push({x:r,y:o,isHit:!1})}return t}Object.defineProperty(t,"__esModule",{value:!0}),t.getShipPositions=function(e){return e.map((e=>({positions:n(e)})))}},45:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.resetGame=function(e,t,n){[r.stateManager.getClient(e),r.stateManager.getClient(t)].forEach((e=>{e.roomId=null,e.gameId=null,e.board=(0,s.createBoard)(o.BOARD_SIZE),e.shipsCoord=[]})),r.stateManager.deleteGame(n)};const r=n(332),o=n(139),s=n(412)},86:e=>{e.exports=require("ws")},982:e=>{e.exports=require("crypto")},896:e=>{e.exports=require("fs")},611:e=>{e.exports=require("http")},928:e=>{e.exports=require("path")}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var s=t[r]={exports:{}};return e[r].call(s.exports,s,s.exports,n),s.exports}(()=>{const e=n(793),t=n(86),r=n(982),o=n(332),s=n(376),a=n(950),i=n(407),l=n(335),c=n(245),d=n(30);console.log("Start static http server on the 8181 port!"),e.httpServer.listen(8181);const u=new t.WebSocketServer({port:3e3});u.on("connection",(e=>{const t=(0,r.randomUUID)();console.log(`ws client connection with id ${t} opened`),e.on("message",(n=>{const r=JSON.parse(n),{type:o,data:u}=r;switch(console.log("request type = ",o),o){case"reg":(0,s.handleRegistration)(e,u,t);break;case"create_room":(0,a.handleCreateRoom)(t);break;case"add_user_to_room":(0,i.handleAddUserToRoom)(e,u,t);break;case"add_ships":(0,l.handleAddShips)(e,u,t);break;case"attack":(0,c.handleAttack)(e,u,t);break;case"randomAttack":(0,d.handleRandomAttack)(e,u,t);break;default:console.warn("Unknown message type:",o)}})),e.on("error",(e=>{console.error("WebSocket error:",e.message)})),e.on("close",(()=>{o.stateManager.removeClient(t),console.log(`ws client connection with id ${t} closed`)}))})),u.on("listening",(()=>{console.log("WebSocket server is running on port 3000")})),process.on("SIGINT",(async()=>{const e=[...u.clients].map((e=>new Promise((t=>{e.close(1e3),t()}))));await Promise.all(e),u.close((()=>{console.log("WebSocket server closed"),process.exit(0)}))}))})()})();